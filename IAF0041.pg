flags: 0100
blocks: <h3>Информация</h3><p>Страничка предмета: <a class="url http" href="http://www.pld.ttu.ee/~teet/a1_k_ttu.html">http://www.pld.ttu.ee/~teet/a1_k_ttu.html</a><br />Задания и другие материалы: <a class="url http" href="https://edu.pld.ttu.ee/">https://edu.pld.ttu.ee/</a></p><h3>Харьютусы</h3><p>Допуском к экзамену являются выполненные лабы и пара проверочных. Проверочные проблем никаких вызывать не должны, вся информация присутствует на слайдах и в википедии. С Лабами немного сложнее, но если понимаете, что от вас требуется, то всё будет в порядке.</p><p>По какой-то причине до сих пор иногда рекомендуется использовать <a class="url http outside" href="http://www.pld.ttu.ee/info/dixi/">DixiCad</a> - смело это игнорируйте. DixiCad - это устаревший софт, который даже загуглить нормально нельзя (все результаты поиска связаны с ТТУ).<br />Xilinx - это уже что-то посовременнее, однако с ним тоже проблем достаточно - постоянные вылеты и прочие проблемы. В целом пользоваться можно, если не хотите сильно заморачиваться, то это ваш выбор.</p><p>Есть еще пара вариантов:</p><ul><li>Proteus - вроде бы нормальная программа, но стоит каких-то нечеловеческих денег.</li><li><a class="url http" href="http://ww.fastad.com/circuit/">http://ww.fastad.com/circuit/</a> - Миленьнкий java applet, только не уверен, что симуляцию в таком виде примут.</li><li><strong>gEDA</strong> - свободный вариант, но работает только на GNU/Linux, да и в целом требует более глубоких знаний. Этот вариант довольно подробно описан ниже.</li></ul><h3>Свободное программное обеспечение</h3><p>Самой удобной связкой скорее всего будет <a class="url http outside" href="http://www.geda-project.org/">gschem + icarus + gtkwave</a>.</p><ul><li>gschem - тут просто рисуем схему</li><li>gnetlist - преобразует схему в verilog модуль</li><li>iverilog - симулируем схему! Только нужно самим написать test bench.</li><li>gtkwave - просматрвиаем результат симуляции.</li></ul><p>Вроде бы схему можно сделать и в Kicad, но я так и не разобрался, как из него геренировать verilog модули.</p><h4>Установка</h4><p>На debian-based системах всё просто:</p><pre class="real">apt-get install geda gtkwave iverilog</pre><p>Есть и <a class="url http outside" href="http://www.delorie.com/pcb/geda-windows/">порт для windows</a>, но он неадекватно устарел, можете даже им не заморачиваться.</p><p>Проекты развиваются достаточно быстро, поэтому советую использовать последние версии.</p><h4>Схема</h4><p>В схеме для входов используйте IPAD, а для выходов OPAD. Сеть каждого IPAD и OPAD должна быть названа - кликаете на соединение, edit, добавляете netname.</p><p>Для схемы необходимо добавить атрибут module_name, которым в дальнейшем будет называться ваш модуль в verilog. (Add/Attribute)</p><p>В конце все элементы нужно пронумеровать. Это делается автоматически: Attributes/Autonumber text. В autonumber text in вместо Selected objects выбрать Whole hierarchy (впрочем, можно и что-то другое, но если вы используете submodules, тогда точно whole hierarchy).</p><h5>Создание своего компонента, состоящего из обычных элементов</h5><p>Вам необходимо создать два файла:<br /></p><ul><li><strong>.sch</strong> содержащий внутреннее строение компонента</li><li><strong>.sym</strong> для отображения компонента в общей схеме</li></ul><p>Подробнее:</p><h6>.sch</h6><p>Для входов и выходов используйте in-1 и out-1 из библиотеки input/output.<br />Каждому входу и выходу нужно дать имя в refdes.</p><h6>.sym</h6><p>Добавляем пины и линии, как вам нравится. У каждого пина в настройках нужно поставить:<br /></p><ul><li>pintype - обычно это либо in, либо out</li><li>pinlabel - название пина. Должно быть таким же, как и refdes в .sch файле.</li><li>pinnumber и pinseq - номер пина. Я обычно ставлю pinseq такой же, как и pinnumber. Учтите, что начинаться они должны с единицы, и пропускать номера нельзя. Подробнее тут: <a class="url http" href="http://wiki.geda-project.org/geda:master_attributes_list#pinseq">http://wiki.geda-project.org/geda:master_attributes_list#pinseq</a></li></ul><p>После того, как все готово, выделяем всё что есть (Ctrl+a) и жмем Edit/Symbol translate, на 0, ОК. Это нужно для того, чтобы при добавлении компонента в схему он появлялся бы под мышкой, а не где-то еще.</p><p>Добавляем два атрибута:<br /></p><ul><li>source=путь к внутренностям - для привязки</li><li>refdes=X? - для нумерации. То есть такие компоненты будут называться X1, X2 и так далее.</li></ul><h4>Добавление элемента в основную схему</h4><p>Чтобы ваш новый компонент было видно в библиотеке элементов, нужно отредактировать (или создать, если его не существует) файл /.gEDA/gafrc . Туда добавляем это:<br /></p><pre class="real">(component-library ".")
	(source-library ".")</pre><p>Другими словами, чтобы он добавлял в библиотеку все файлы, лежащие рядом с вашей главной схемой.</p><h4>Создание своего компонента с готовым verilog кодом для него</h4><p>Нужно создать .sym файл, процесс чем-то похож на создание сабмодуля, но есть различия. В .sym нужно добавить атрибут device, а в его значение написать название модуля. Также вам может понадобится VERILOG_PORTS=POSITIONAL, хотя я такой атрибут не добавлял вообще. Порядок параметров определяется за счет pinnumber, в который вы можете вписать название параметра. Смею предположить, что при VERILOG_PORTS=POSITIONAL будет игнорироваться pinnumber, а вместо него будет использован pinseq. Совестно будет поставить pinseq и pinnumber соответствующие действительности. Кроме этого, вы должны также указать refdes, а вот указывать source не нужно. Не забывайте сделать translate :)</p><h3>Симуляция</h3><p>Для начала нужно по схеме сгенерировать verilog модуль:<br /></p><pre class="real">gnetlist -g verilog -o ПолучившийсяМодуль.v файлсхемы.sch</pre><p>Получившийся .v файл будет содержать переменные, у которых в названии есть &#x201c;/&#x201d;. Несмотря на то, что даже такие переменные должны работать, iverilog очень ругается. Если же заменить все знаки &#x201c;/&#x201d; на, допустим, &#x201c;__&#x201d;, то проблема решится. Плохо, что нельзя в обычном редакторе сделать replace all, потому что это не единственные места, где есть этот знак, зато perl легко с этим справится:</p><pre class="real">perl -p -i -e 's/(?&lt;!\*)\/(?!\*)/__/g' ПолучившийсяМодуль.v</pre><h3>Компилируем и запускаем</h3><pre class="real">iverilog -o compiled Arvutid.V ArvutidTestBench.v # compile
	vvp compiled # run</pre><p>Если же у вас несколько verilog файлов (так может быть в том случае, если вы создавали свой модуль), то вставьте и его имя в первую команду.</p><p>В случае, если у вас какая-то ошибка в схеме, то на выходах вы можете получить такие значение:<br /></p><ul><li>x - unknown logic value</li><li>z - high impendance<br />Проверяйте схему!</li></ul><p>Весь процесс от начала до конца:</p><pre class="real">gnetlist -g veriog -o Arvutid.v arvutid.sch # generate verilog file for schematic
	perl -p -i -e 's/(?&lt;!\*)\/(?!\*)/__/g' Arvutid.v # replace / with __
	
	iverilog -o compiled Arvutid.v ArvutidTestBench.v # compile
	vvp compiled # run</pre><h4>Результат симуляции</h4><p>Просто открываете .vcd файл с помощью gtkwave.</p><h4>Некоторые замечания</h4><ul><li>Порядок входящих и выходящих портов зависит от расположения в .sch файле</li><li>Если вас не устраивает порядок параметров в сгенерированном .v файле, то удалите все IPAD (при этом не удаляя соединения), а потом поставьте их обратно в <strong>обратном</strong> порядке.</li><li>Все файлы содержат просто текст, так что если что-то не так, то их можно открыть любым текстовым редактором и подредактировать вручную.</li><li>bufif не работают. Баг репорт с патчем здесь: <a class="url http" href="https://bugs.launchpad.net/geda/+bug/1304681">https://bugs.launchpad.net/geda/+bug/1304681</a> <strong>2014-04-11</strong> патч приняли, в следующей версии должно всё работать.</li></ul><h4>Пример</h4><p>Один пример ценнее тысячи слов: <a class="url http outside" href="http://dl.dropboxusercontent.com/u/71236259/arvutid.html">первая лаба</a><br />Если возникают какие-то проблемы, особенно при создании своих компонентов, то задавайте вопросы в комментариях - разберемся.</p><h4>Полезные ссылки:</h4><p><a class="url http" href="http://www.easy-asic.de/downloads/HOWTO_hierarchical_designs.pdf">http://www.easy-asic.de/downloads/HOWTO_hierarchical_designs.pdf</a></p><h3>Обсуждения</h3><ul><li>[[Вопрос 8]] - про вторую лабу.</li></ul><h2 id="commentsHeading">Комментарии:</h2><div class="userComment"><p>Кому нужна программа xilinx есть ссылка:<br /><a class="url http" href="http://rutracker.org/forum/viewtopic.php?t=1463255">http://rutracker.org/forum/viewtopic.php?t=1463255</a></p><p>&#x2013; Juli 2014-03-06 12:53 UTC</p></div>
diff-minor: <p><strong>Changed:</strong></p>
	<div class="old"><p>&lt; <strong class="changes">==</strong>Arvutid <strong class="changes">[http://ois.ttu.ee/portal/page?_pageid=35,428610&amp;_dad=portal&amp;_schema=PORTAL&amp;p_action=view&amp;p_id=</strong>30874<strong class="changes">&amp;p_public=1&amp;p_mode=1]</strong></p></div><p><strong>to</strong></p>
	<div class="new"><p>&gt; <strong class="changes">#SUBTITLE</strong> Arvutid<br />&gt; <strong class="changes">#SUBURL: Course:</strong>30874</p></div>
ip: 89.235.239.240
ts: 1408847380
minor: 1
host: 89.235.223.25
username: Bot
revision: 16
diff-major: <p><strong>Added:</strong></p>
	<div class="new"><p>&gt; Весь процесс от начала до конца:<br />&gt; {{{<br />&gt; gnetlist -g veriog -o Arvutid.v arvutid.sch # generate verilog file for schematic<br />&gt; perl -p -i -e 's/(?&lt;!\*)\/(?!\*)/__/g' Arvutid.v # replace / with __<br />&gt; iverilog -o compiled Arvutid.v ArvutidTestBench.v # compile<br />&gt; vvp compiled # run<br />&gt; }}}<br />&gt; ====Результат симуляции<br />&gt; Просто открываете .vcd файл с помощью gtkwave.</p></div>
summary: Refactoring
languages: 
text: #SUBTITLE Arvutid
	#SUBURL: Course:30874
	
	=== Информация
	Страничка предмета: http://www.pld.ttu.ee/~teet/a1_k_ttu.html
	Задания и другие материалы: https://edu.pld.ttu.ee/
	
	=== Харьютусы
	Допуском к экзамену являются выполненные лабы и пара проверочных. Проверочные проблем никаких вызывать не должны, вся информация присутствует на слайдах и в википедии. С Лабами немного сложнее, но если понимаете, что от вас требуется, то всё будет в порядке.
	
	По какой-то причине до сих пор иногда рекомендуется использовать [[http://www.pld.ttu.ee/info/dixi/ DixiCad]] - смело это игнорируйте. !DixiCad - это устаревший софт, который даже загуглить нормально нельзя (все результаты поиска связаны с ТТУ).
	Xilinx - это уже что-то посовременнее, однако с ним тоже проблем достаточно - постоянные вылеты и прочие проблемы. В целом пользоваться можно, если не хотите сильно заморачиваться, то это ваш выбор.
	
	Есть еще пара вариантов:
	
	 * Proteus - вроде бы нормальная программа, но стоит каких-то нечеловеческих денег.
	 * http://ww.fastad.com/circuit/ - Миленьнкий java applet, только не уверен, что симуляцию в таком виде примут.
	 * **gEDA** - свободный вариант, но работает только на GNU/Linux, да и в целом требует более глубоких знаний. Этот вариант довольно подробно описан ниже.
	
	=== Свободное программное обеспечение
	
	Самой удобной связкой скорее всего будет [[http://www.geda-project.org/ gschem + icarus + gtkwave]].
	
	 * gschem - тут просто рисуем схему
	 * gnetlist - преобразует схему в verilog модуль
	 * iverilog - симулируем схему! Только нужно самим написать test bench.
	 * gtkwave - просматрвиаем результат симуляции.
	
	Вроде бы схему можно сделать и в Kicad, но я так и не разобрался, как из него геренировать verilog модули.
	
	==== Установка
	
	На debian-based системах всё просто:
	
	{{{
	apt-get install geda gtkwave iverilog
	}}}
	
	Есть и [[http://www.delorie.com/pcb/geda-windows/ порт для windows]], но он неадекватно устарел, можете даже им не заморачиваться.
	
	Проекты развиваются достаточно быстро, поэтому советую использовать последние версии.
	
	==== Схема
	В схеме для входов используйте IPAD, а для выходов OPAD. Сеть каждого IPAD и OPAD должна быть названа - кликаете на соединение, edit, добавляете netname.
	
	Для схемы необходимо добавить атрибут module_name, которым в дальнейшем будет называться ваш модуль в verilog. (Add/Attribute)
	
	В конце все элементы нужно пронумеровать. Это делается автоматически: Attributes/Autonumber text. В autonumber text in вместо Selected objects выбрать Whole hierarchy (впрочем, можно и что-то другое, но если вы используете submodules, тогда точно whole hierarchy).
	
	===== Создание своего компонента, состоящего из обычных элементов
	Вам необходимо создать два файла:
	 * **.sch** содержащий внутреннее строение компонента
	 * **.sym** для отображения компонента в общей схеме
	
	Подробнее:
	
	====== .sch
	Для входов и выходов используйте in-1 и out-1 из библиотеки input/output.
	Каждому входу и выходу нужно дать имя в refdes.
	
	====== .sym
	Добавляем пины и линии, как вам нравится. У каждого пина в настройках нужно поставить:
	* pintype - обычно это либо in, либо out
	* pinlabel - название пина. Должно быть таким же, как и refdes в .sch файле.
	* pinnumber и pinseq - номер пина. Я обычно ставлю pinseq такой же, как и pinnumber. Учтите, что начинаться они должны с единицы, и пропускать номера нельзя. Подробнее тут: http://wiki.geda-project.org/geda:master_attributes_list#pinseq
	
	После того, как все готово, выделяем всё что есть (Ctrl+a) и жмем Edit/Symbol translate, на 0, ОК. Это нужно для того, чтобы при добавлении компонента в схему он появлялся бы под мышкой, а не где-то еще.
	
	Добавляем два атрибута:
	* source=путь к внутренностям - для привязки
	* refdes=X? - для нумерации. То есть такие компоненты будут называться X1, X2 и так далее.
	
	====Добавление элемента в основную схему
	Чтобы ваш новый компонент было видно в библиотеке элементов, нужно отредактировать (или создать, если его не существует) файл ~/.gEDA/gafrc . Туда добавляем это:
	{{{
	(component-library ".")
	(source-library ".")
	}}}
	Другими словами, чтобы он добавлял в библиотеку все файлы, лежащие рядом с вашей главной схемой.
	
	====Создание своего компонента с готовым verilog кодом для него
	Нужно создать .sym файл, процесс чем-то похож на создание сабмодуля, но есть различия. В .sym нужно добавить атрибут device, а в его значение написать название модуля. Также вам может понадобится VERILOG_PORTS=POSITIONAL, хотя я такой атрибут не добавлял вообще. Порядок параметров определяется за счет pinnumber, в который вы можете вписать название параметра. Смею предположить, что при VERILOG_PORTS=POSITIONAL будет игнорироваться pinnumber, а вместо него будет использован pinseq. Совестно будет поставить pinseq и pinnumber соответствующие действительности. Кроме этого, вы должны также указать refdes, а вот указывать source не нужно. Не забывайте сделать translate :)
	
	===Симуляция
	Для начала нужно по схеме сгенерировать verilog модуль:
	{{{
	gnetlist -g verilog -o ПолучившийсяМодуль.v файлсхемы.sch
	}}}
	
	Получившийся .v файл будет содержать переменные, у которых в названии есть "/". Несмотря на то, что даже такие переменные должны работать, iverilog очень ругается. Если же заменить все знаки "/" на, допустим, "__", то проблема решится. Плохо, что нельзя в обычном редакторе сделать replace all, потому что это не единственные места, где есть этот знак, зато perl легко с этим справится:
	
	{{{
	perl -p -i -e 's/(?<!\*)\/(?!\*)/__/g' ПолучившийсяМодуль.v
	}}}
	
	===Компилируем и запускаем
	{{{
	iverilog -o compiled Arvutid.V ArvutidTestBench.v # compile
	vvp compiled # run
	}}}
	
	Если же у вас несколько verilog файлов (так может быть в том случае, если вы создавали свой модуль), то вставьте и его имя в первую команду.
	
	В случае, если у вас какая-то ошибка в схеме, то на выходах вы можете получить такие значение:
	* x - unknown logic value
	* z - high impendance
	Проверяйте схему!
	
	Весь процесс от начала до конца:
	
	{{{
	gnetlist -g veriog -o Arvutid.v arvutid.sch # generate verilog file for schematic
	perl -p -i -e 's/(?<!\*)\/(?!\*)/__/g' Arvutid.v # replace / with __
	
	iverilog -o compiled Arvutid.v ArvutidTestBench.v # compile
	vvp compiled # run
	}}}
	
	====Результат симуляции
	Просто открываете .vcd файл с помощью gtkwave.
	
	====Некоторые замечания
	 * Порядок входящих и выходящих портов зависит от расположения в .sch файле
	 * Если вас не устраивает порядок параметров в сгенерированном .v файле, то удалите все IPAD (при этом не удаляя соединения), а потом поставьте их обратно в **обратном** порядке.
	 * Все файлы содержат просто текст, так что если что-то не так, то их можно открыть любым текстовым редактором и подредактировать вручную.
	 * bufif не работают. Баг репорт с патчем здесь: https://bugs.launchpad.net/geda/+bug/1304681 **2014-04-11** патч приняли, в следующей версии должно всё работать.
	
	====Пример
	Один пример ценнее тысячи слов: [[http://dl.dropboxusercontent.com/u/71236259/arvutid.html первая лаба]]
	Если возникают какие-то проблемы, особенно при создании своих компонентов, то задавайте вопросы в комментариях - разберемся.
	
	====Полезные ссылки:
	
	http://www.easy-asic.de/downloads/HOWTO_hierarchical_designs.pdf
	
	=== Обсуждения
	
	 * [[Вопрос 8]] - про вторую лабу.
	
	----
	
	Кому нужна программа xilinx есть ссылка:
	http://rutracker.org/forum/viewtopic.php?t=1463255
	
	-- Juli 2014-03-06 12:53 UTC
	
lastmajor: 14
keep-ts: 1408847380
